#To combine FY15-FY16 and FY17-FY18 datasets for Prevention Trend Tool
#Date 7/12/2018 KS

memory.limit(size = 90000)

#set working directory and load libraries
setwd("[Enter location on computer]")

#read in datasets

df1 <- readr::read_tsv("ICPI_MER_Structured_Dataset_OU_IM_FY15-16_20180515_v1_1.txt", col_names = TRUE)
df2 <- readr::read_tsv("MER_Structured_Dataset_OU_IM_FY17-18_20180622_v2_1.txt", col_names = TRUE)

#subset for indicators of interest
subdf1 <- subset(df1, indicator == 'PP_PREV' | indicator == "KP_PREV" | indicator == "KP_PREV_MSMTGSW" | indicator == "GEND_GBV"| indicator == "VMMC_CIRC" |indicator ==  "PrEP_NEW" |indicator ==  "OVC_SERV")
subdf2 <- subset(df2, indicator == 'PP_PREV' | indicator == "KP_PREV" | indicator == "KP_PREV_MSMTGSW" | indicator == "GEND_GBV"| indicator == "VMMC_CIRC" |indicator ==  "PrEP_NEW" |indicator ==  "OVC_SERV")

colnames(subdf1)

#remove unnecessary columns
longdf1 <- subset(subdf1, select = -c(Region, RegionUID, OperatingUnitUID, dataElementUID, CountryName, isMCAD, coarseDisaggregate, disaggregate,
                                         MechanismUID, categoryOptionComboUID, categoryOptionComboName))
colnames(longdf1)

longdf2 <- subset(subdf2, select = -c(Region, RegionUID, OperatingUnitUID, CountryName, isMCAD, coarseDisaggregate, disaggregate,
                                        MechanismUID, categoryOptionComboName))
colnames(longdf2)

#reshape datasets from wide to long, putting all results/targets into one column; removes rows with missing values
longsubdf1 <- gather(longdf1, key= "period", "value", FY2015Q2:FY2016APR, na.rm=TRUE)
longsubdf2 <- gather(longdf2, key= "period", "value", FY2017_TARGETS:FY2019_TARGETS, na.rm=TRUE)

#Check # of columns match
ncol(longsubdf1)
ncol(longsubdf2)

#merge longdf1 and longdf2
mergedf <- rbind(longsubdf1, longsubdf2)
colnames(mergedf)

#subset data without NULL values
finaldf <- select(filter(mergedf, value != "NULL"),c(OperatingUnit:value))
colnames(finaldf)

#Check for N/A values
is.na(finaldf)

#Replace N/A values with blanks
finaldf [is.na(finaldf)]=""
is.na(finaldf)

finaldf <- filter(finaldf, !is.na(value))

#Export dataset to csv or txt or xls for reading into Tableau
write.csv(finaldf, file = "MSDmergedFY15toFY18.csv", row.names = FALSE)
